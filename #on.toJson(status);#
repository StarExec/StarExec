02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    1) package org.starexec.app;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    2) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    3) import com.google.gson.Gson;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    4) import com.google.gson.JsonArray;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    5) import com.google.gson.JsonObject;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    6) import com.google.gson.JsonPrimitive;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    7) import com.google.gson.annotations.Expose;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    8) import org.apache.commons.io.FileUtils;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600    9) import org.apache.commons.lang3.time.StopWatch;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   10) import org.apache.commons.lang3.tuple.ImmutableTriple;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   11) import org.apache.commons.lang3.tuple.Triple;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   12) import org.starexec.command.C;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   13) import org.starexec.command.Connection;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   14) import org.starexec.constants.R;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   15) import org.starexec.data.database.*;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   16) import org.starexec.data.database.AnonymousLinks.PrimitivesToAnonymize;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   17) import org.starexec.data.security.JobSecurity;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   18) import org.starexec.data.security.ValidatorStatusCode;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   19) import org.starexec.data.to.*;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   20) import org.starexec.data.to.Queue;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   21) import org.starexec.data.to.enums.Primitive;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   22) import org.starexec.data.to.enums.ProcessorType;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   23) import org.starexec.data.to.pipelines.JoblineStage;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   24) import org.starexec.data.to.tuples.AttributesTableData;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   25) import org.starexec.data.to.tuples.AttributesTableRow;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   26) import org.starexec.data.to.tuples.Locatable;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   27) import org.starexec.data.to.tuples.SolverConfig;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   28) import org.starexec.exceptions.StarExecDatabaseException;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   29) import org.starexec.logger.StarLogger;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   30) import org.starexec.test.integration.TestResult;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   31) import org.starexec.test.integration.TestSequence;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   32) import org.starexec.util.*;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   33) //import org.starexec.data.database.Common;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   34) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   35) import javax.servlet.http.HttpServletRequest;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   36) import java.awt.*;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   37) import java.io.File;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   38) import java.io.FileOutputStream;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   39) import java.io.IOException;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   40) import java.sql.SQLException;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   41) //import java.sql.CallableStatement;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   42) //import java.sql.ResultSet;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   43) import java.util.*;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   44) import java.util.List;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   45) import java.util.stream.Collectors;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   46) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   47) /**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   48)  * Holds all helper methods and classes for our restful web services
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   49)  */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   50) public class RESTHelpers {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   51) 	private static final StarLogger log = StarLogger.getLogger(RESTHelpers.class);
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   52) 	private static final String SEARCH_QUERY = "sSearch";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   53) 	private static final String SORT_DIRECTION = "sSortDir_0";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   54) 	private static final String SYNC_VALUE = "sEcho";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   55) 	private static final String SORT_COLUMN = "iSortCol_0";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   56) 	private static final String SORT_COLUMN_OVERRIDE = "sort_by";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   57) 	private static final String SORT_COLUMN_OVERRIDE_DIR = "sort_dir";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   58) 	private static final String STARTING_RECORD = "iDisplayStart";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   59) 	private static final String RECORDS_PER_PAGE = "iDisplayLength";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   60) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   61) 	 * Used to display the 'total entries' information at the bottom of
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   62) 	 * the DataTable; also indirectly controls whether or not the
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   63) 	 * pagination buttons are toggle-able
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   64) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   65) 	private static final String TOTAL_RECORDS = "iTotalRecords";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   66) 	private static final String TOTAL_RECORDS_AFTER_QUERY = "iTotalDisplayRecords";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   67) 	private static final Gson gson = new Gson();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   68) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   69) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   70) 	 * Takes in a list of spaces and converts it into a list of JSTreeItems
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   71) 	 * suitable for being displayed on the client side with the jsTree plugin.
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   72) 	 *
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   73) 	 * @param spaceList The list of spaces to convert
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   74) 	 * @param userID The ID of the user making this request, which is used to tell whether nodes are leaves or not
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   75) 	 * @return List of JSTreeItems to be serialized and sent to client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   76) 	 * @author Tyler Jensen
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   77) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   78) 	protected static List<JSTreeItem> toSpaceTree(List<Space> spaceList, int userID) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   79) 		List<JSTreeItem> list = new LinkedList<>();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   80) 		for (Space space : spaceList) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   81) 			String isOpen = Spaces.getCountInSpace(space.getId(), userID, true) > 0 ? "closed" : "leaf";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   82) 			list.add(new JSTreeItem(space.getName(), space.getId(), isOpen, R.SPACE));
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   83) 		}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   84) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   85) 		return list;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   86) 	}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   87) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   88) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   89) 	 * Takes in a list of spaces and converts it into a list of JSTreeItems
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   90) 	 * suitable for being displayed on the client side with the jsTree plugin.
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   91) 	 *
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   92) 	 * @param jobSpaceList list of JobSpace to convert
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   93) 	 * @return List of JSTreeItems to be serialized and sent to client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   94) 	 * @author Tyler Jensen
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   95) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   96) 	protected static List<JSTreeItem> toJobSpaceTree(List<JobSpace> jobSpaceList) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   97) 		List<JSTreeItem> list = new LinkedList<>();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   98) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600   99) 		for (JobSpace space : jobSpaceList) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  100) 			String isOpen = Spaces.getCountInJobSpace(space.getId()) > 0 ? "closed" : "leaf";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  101) 			list.add(new JSTreeItem(space.getName(), space.getId(), isOpen, R.SPACE, space.getMaxStages()));
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  102) 		}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  103) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  104) 		return list;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  105) 	}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  106) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  107) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  108) 	 * Takes in a list of worker nodes and converts it into a list of
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  109) 	 * JSTreeItems suitable for being displayed on the client side with the
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  110) 	 * jsTree plugin.
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  111) 	 *
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  112) 	 * @param nodes The list of worker nodes to convert
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  113) 	 * @return List of JSTreeItems to be serialized and sent to client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  114) 	 * @author Tyler Jensen
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  115) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  116) 	protected static List<JSTreeItem> toNodeList(List<WorkerNode> nodes) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  117) 		List<JSTreeItem> list = new LinkedList<>();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  118) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  119) 		for (WorkerNode n : nodes) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  120) 			// Only take the first part of the host name, the full one is too
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  121) 			// int to display on the client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  122) 			JSTreeItem t = new JSTreeItem(n.getName().split("\\.")[0], n.getId(), "leaf", n.getStatus().equals("ACTIVE") ? "enabled_node" : "disabled_node");
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  123) 			list.add(t);
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  124) 		}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  125) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  126) 		return list;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  127) 	}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  128) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  129) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  130) 	 * Takes in a list of queues and converts it into a list of JSTreeItems
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  131) 	 * suitable for being displayed on the client side with the jsTree plugin.
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  132) 	 *
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  133) 	 * @param queues The list of queues to convert
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  134) 	 * @return List of JSTreeItems to be serialized and sent to client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  135) 	 * @author Tyler Jensen
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  136) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  137) 	protected static List<JSTreeItem> toQueueList(List<Queue> queues) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  138) 		List<JSTreeItem> list = new LinkedList<>();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  139) 		for (Queue q : queues) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  140) 			//status might be null, so we don't want a null pointer in that case
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  141) 			String status = q.getStatus();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  142) 			if (status == null) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  143) 				status = "";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  144) 			}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  145) 			String isOpen = !Queues.getNodes(q.getId()).isEmpty() ? "closed" : "leaf";
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  146) 			list.add(new JSTreeItem(q.getName(), q.getId(), isOpen, status.equals("ACTIVE") ? "active_queue" : "inactive_queue"));
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  147) 		}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  148) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  149) 		return list;
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  150) 	}
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  151) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  152) 	/**
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  153) 	 * Takes in a list of spaces (communities) and converts it into a list of
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  154) 	 * JSTreeItems suitable for being displayed on the client side with the
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  155) 	 * jsTree plugin.
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  156) 	 *
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  157) 	 * @param communities The list of communities to convert
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  158) 	 * @return List of JSTreeItems to be serialized and sent to client
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  159) 	 * @author Tyler Jensen
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  160) 	 */
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  161) 	protected static List<JSTreeItem> toCommunityList(List<Space> communities) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  162) 		List<JSTreeItem> list = new LinkedList<>();
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  163) 
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  164) 		for (Space space : communities) {
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  165) 			JSTreeItem t = new JSTreeItem(space.getName(), space.getId(), "leaf", R.SPACE);
02832592 (Preston Dodd      2023-01-24 17:17:39 -0600  166) 			list.add(t);
02832592 (Preston DodBB